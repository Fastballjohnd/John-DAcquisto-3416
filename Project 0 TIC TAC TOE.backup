python
def player(board):
    """Returns the player who has the next turn (X or O)."""
    X_count = sum(row.count("X") for row in board)
    O_count = sum(row.count("O") for row in board)
    return "X" if X_count == O_count else "O"
2. Actions Function
Find all available moves.

python
def actions(board):
    """Returns a set of possible actions (i, j) for the given board."""
    return {(i, j) for i in range(3) for j in range(3) if board[i][j] is None}
3. Result Function
Return the new board after making a move.

python
import copy

def result(board, action):
    """Returns a new board state after applying action, without modifying the original board."""
    if action not in actions(board):
        raise Exception("Invalid move")

    new_board = copy.deepcopy(board)
    new_board[action[0]][action[1]] = player(board)
    return new_board
4. Winner Function
Check for a winner.

python
def winner(board):
    """Returns the winner (X or O) if there is one, else None."""
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] and board[i][0] is not None:
            return board[i][0]  # Horizontal win
        if board[0][i] == board[1][i] == board[2][i] and board[0][i] is not None:
            return board[0][i]  # Vertical win

    if board[0][0] == board[1][1] == board[2][2] and board[0][0] is not None:
        return board[0][0]  # Diagonal win
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] is not None:
        return board[0][2]  # Diagonal win

    return None
5. Terminal Function
Check if the game is over.

python
def terminal(board):
    """Returns True if the game is over, else False."""
    return winner(board) is not None or all(cell is not None for row in board for cell in row)
6. Utility Function
Assign values to terminal states.

python
def utility(board):
    """Returns the utility value: 1 if X wins, -1 if O wins, 0 if tie."""
    game_winner = winner(board)
    return 1 if game_winner == "X" else -1 if game_winner == "O" else 0
7. Minimax Function
Find the optimal move.

python
def minimax(board):
    """Returns the optimal move (i, j) using Minimax algorithm."""
    if terminal(board):
        return None

    current_player = player(board)

    def max_value(board):
        if terminal(board):
            return utility(board)
        v = float("-inf")
        for action in actions(board):
            v = max(v, min_value(result(board, action)))
        return v

    def min_value(board):
        if terminal(board):
            return utility(board)
        v = float("inf")
        for action in actions(board):
            v = min(v, max_value(result(board, action)))
        return v

    best_move = None
    if current_player == "X":
        best_value = float("-inf")
        for action in actions(board):
            value = min_value(result(board, action))
            if value > best_value:
                best_value, best_move = value, action
    else:
        best_value = float("inf")
        for action in actions(board):
            value = max_value(result(board, action))
            if value < best_value:
                best_value, best_move = value, action

    return best_move
