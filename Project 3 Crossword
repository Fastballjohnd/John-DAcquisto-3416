class CrosswordCreator:

    def enforce_node_consistency(self):
        """Ensure each variable's domain contains only values of correct length."""
        for var in self.domains:
            self.domains[var] = {word for word in self.domains[var] if len(word) == var.length}

    def revise(self, x, y):
        """Make variable x arc consistent with y by removing inconsistent values."""
        revised = False
        overlap = self.crossword.overlaps.get((x, y))
        if overlap is None:
            return revised
        
        i, j = overlap
        to_remove = {word_x for word_x in self.domains[x] if not any(
            word_y for word_y in self.domains[y] if word_x[i] == word_y[j]
        )}
        
        if to_remove:
            self.domains[x] -= to_remove
            revised = True

        return revised

    def ac3(self, arcs=None):
        """Enforce arc consistency using AC3 algorithm."""
        queue = arcs if arcs is not None else [(x, y) for x in self.domains for y in self.crossword.neighbors(x)]
        while queue:
            x, y = queue.pop(0)
            if self.revise(x, y):
                if not self.domains[x]:
                    return False
                queue.extend([(z, x) for z in self.crossword.neighbors(x) if z != y])
        return True

    def assignment_complete(self, assignment):
        """Return True if all variables have assigned values."""
        return len(assignment) == len(self.domains)

    def consistent(self, assignment):
        """Return True if assignment satisfies constraints."""
        words = set(assignment.values())
        if len(words) != len(assignment):  # Ensure uniqueness
            return False
        
        for var, word in assignment.items():
            if len(word) != var.length:  # Check word length
                return False
            for neighbor in self.crossword.neighbors(var):
                if neighbor in assignment:
                    overlap = self.crossword.overlaps[(var, neighbor)]
                    if overlap and assignment[var][overlap[0]] != assignment[neighbor][overlap[1]]:
                        return False
        return True

    def order_domain_values(self, var, assignment):
        """Return domain values ordered by least-constraining heuristic."""
        return sorted(self.domains[var], key=lambda word: sum(
            1 for neighbor in self.crossword.neighbors(var) if neighbor not in assignment
            for neighbor_word in self.domains[neighbor] if word[self.crossword.overlaps[(var, neighbor)][0]] != neighbor_word[self.crossword.overlaps[(var, neighbor)][1]]
        ))

    def select_unassigned_variable(self, assignment):
        """Select the next variable using MRV and degree heuristics."""
        unassigned = [var for var in self.domains if var not in assignment]
        return min(unassigned, key=lambda var: (len(self.domains[var]), -len(self.crossword.neighbors(var))))

    def backtrack(self, assignment):
        """Perform backtracking search to find a valid crossword solution."""
        if self.assignment_complete(assignment):
            return assignment
        
        var = self.select_unassigned_variable(assignment)
        for value in self.order_domain_values(var, assignment):
            new_assignment = assignment.copy()
            new_assignment[var] = value
            if self.consistent(new_assignment):
                result = self.backtrack(new_assignment)
                if result:
                    return result
        
        return None
