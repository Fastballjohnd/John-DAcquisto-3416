import os
import cv2
import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models

def load_data(data_dir):
    """Load image data and labels from the given directory."""
    images, labels = [], []
    
    for category in range(NUM_CATEGORIES):
        category_path = os.path.join(data_dir, str(category))
        for filename in os.listdir(category_path):
            image_path = os.path.join(category_path, filename)
            image = cv2.imread(image_path)
            image = cv2.resize(image, (IMG_WIDTH, IMG_HEIGHT))  # Resize image
            images.append(image)
            labels.append(category)
    
    return np.array(images), np.array(labels)

def get_model():
    """Return a compiled neural network model."""
    model = models.Sequential([
        layers.Conv2D(32, (3, 3), activation="relu", input_shape=(IMG_WIDTH, IMG_HEIGHT, 3)),
        layers.MaxPooling2D((2, 2)),
        
        layers.Conv2D(64, (3, 3), activation="relu"),
        layers.MaxPooling2D((2, 2)),
        
        layers.Conv2D(128, (3, 3), activation="relu"),
        layers.MaxPooling2D((2, 2)),
        
        layers.Flatten(),
        layers.Dense(128, activation="relu"),
        layers.Dropout(0.5),
        layers.Dense(NUM_CATEGORIES, activation="softmax")
    ])
    
    model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])
    return model



Learning Rate Scheduling: Fine-tune training by decreasing learning rate over epochs to stabilize later-stage learning.

Batch Normalization: Helps speed up convergence and improve performance stability.
