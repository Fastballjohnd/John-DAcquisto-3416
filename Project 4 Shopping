import csv
from sklearn.neighbors import KNeighborsClassifier

def load_data(filename):
    """Load shopping data from CSV file and return evidence and labels."""
    months = {
        "Jan": 0, "Feb": 1, "Mar": 2, "Apr": 3, "May": 4, "June": 5,
        "Jul": 6, "Aug": 7, "Sep": 8, "Oct": 9, "Nov": 10, "Dec": 11
    }
    
    evidence, labels = [], []

    with open(filename, mode="r") as file:
        reader = csv.reader(file)
        next(reader)  # Skip header row
        for row in reader:
            evidence.append([
                int(row[0]),  # Administrative
                float(row[1]),  # Administrative_Duration
                int(row[2]),  # Informational
                float(row[3]),  # Informational_Duration
                int(row[4]),  # ProductRelated
                float(row[5]),  # ProductRelated_Duration
                float(row[6]),  # BounceRates
                float(row[7]),  # ExitRates
                float(row[8]),  # PageValues
                float(row[9]),  # SpecialDay
                months[row[10]],  # Month (converted to int)
                int(row[11]),  # OperatingSystems
                int(row[12]),  # Browser
                int(row[13]),  # Region
                int(row[14]),  # TrafficType
                1 if row[15] == "Returning_Visitor" else 0,  # VisitorType
                1 if row[16] == "TRUE" else 0  # Weekend
            ])
            labels.append(1 if row[17] == "TRUE" else 0)

    return evidence, labels

def train_model(evidence, labels):
    """Train k-nearest-neighbor classifier using given evidence and labels."""
    model = KNeighborsClassifier(n_neighbors=1)
    model.fit(evidence, labels)
    return model

def evaluate(labels, predictions):
    """Evaluate performance by computing sensitivity and specificity."""
    true_positive = sum(1 for actual, predicted in zip(labels, predictions) if actual == 1 and predicted == 1)
    false_negative = sum(1 for actual, predicted in zip(labels, predictions) if actual == 1 and predicted == 0)
    true_negative = sum(1 for actual, predicted in zip(labels, predictions) if actual == 0 and predicted == 0)
    false_positive = sum(1 for actual, predicted in zip(labels, predictions) if actual == 0 and predicted == 1)

    sensitivity = true_positive / (true_positive + false_negative)
    specificity = true_negative / (true_negative + false_positive)

    return sensitivity, specificity

# Summary:
# load_data(filename) properly processes the CSV file, converting categorical values like Month and VisitorType into integers.
# 
# train_model(evidence, labels) trains a k-NN classifier with k=1 using scikit-learn.
# 
# evaluate(labels, predictions) computes sensitivity and specificity, ensuring proper performance evaluation.